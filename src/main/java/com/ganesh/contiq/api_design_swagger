openapi: 3.0.3
info:
  title: Swagger Contiq
  description: |-
    This is a documentation for REST API endpoints which are required for a file processing application. It includes functionalites such as uploading files, searching the data inside files using elastic search engine.
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https://contiq.ganesh.com/api/v1
tags:
  - name: File
    description: Everything about Files
    externalDocs:
      description: Find out more
      url: http://swagger.io
  # - name: store
  #   description: Access to Petstore orders
  #   externalDocs:
  #     description: Find out more about our store
  #     url: http://swagger.io
  # - name: user
  #   description: Operations about user
paths:
  /api/v1/files:
    post:
      tags:
        - File
      summary: Uploading new files
      description: Uploading new files into a user account
      operationId: uploadFiles
      requestBody:
        description: Attach files
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FileUpload'
          # application/xml:
          #   schema:
          #     $ref: '#/components/schemas/Pet'
          # application/x-www-form-urlencoded:
          #   schema:
          #     $ref: '#/components/schemas/Pet'
        required: true
      responses:
        '200':
          description: Files uploaded successfully
          content:
            text/plain:
              schema:
                type: string
                example: 'Files uploaded successfully'
          # content:
          #   application/json:
          #     schema:
          #       $ref: '#/components/schemas/Pet'
          #   application/xml:
          #     schema:
          #       $ref: '#/components/schemas/Pet'
        '401':
          description: Unauthorized
        '404':
          description: User not found
    get:
      tags:
        - File
      summary: Fetch files
      description: Fetch files uploaded by user id
      operationId: fetchFiles
      responses:
        '200':
          description: Fetched Files successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FileMetaData'
        '401':
          description: Unauthorized
        '404':
          description: User not found
  /api/v1/files/{fileId}:
    get:
      tags:
       - File
      summary: Fetch files by id
      parameters:
        - name: fileId
          in: path
          description: ID of file
          required: true
          schema:
            type: string
            default: "file123"
      responses:
        '200':
          description: Fetched File content successfully
          content:
            text/plain:
              schema:
                type: string
                example: 'File content'
        '401':
          description: Unauthorized
        '404':
          description: User not found

  /api/v1/files/search:
    get:
      tags:
       - File
      summary: Search files having keyword
      parameters:
        - name: keyword
          in: query
          description: word to be searched
          required: false
          schema:
            type: string
            default: "content"
      responses:
        '200':
          description: Fetched File content successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FileMetaData'
        '401':
          description: Unauthorized
        '404':
          description: User not found
  /api/v1/files/{fileId}/search:
    get:
      tags:
       - File
      summary: Search paragraphs having keyword within in given file
      parameters:
        - name: fileId
          in: path
          description: ID of file
          required: true
          schema:
            type: string
            default: "file123"
        - name: keyword
          in: query
          description: word to be searched
          required: false
          schema:
            type: string
            default: "content"
      responses:
        '200':
          description: Fetched matched paragraphs within a given file successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Paragraph'
        '401':
          description: Unauthorized
        '404':
          description: User not found

      # security:
      #   - petstore_auth:
      #       - write:pets
      #       - read:pets
    # post:
    #   tags:
    #     - pet
    #   summary: Add a new pet to the store
    #   description: Add a new pet to the store
    #   operationId: addPet
    #   requestBody:
    #     description: Create a new pet in the store
    #     content:
    #       application/json:
    #         schema:
    #           $ref: '#/components/schemas/Pet'
    #       application/xml:
    #         schema:
    #           $ref: '#/components/schemas/Pet'
    #       application/x-www-form-urlencoded:
    #         schema:
    #           $ref: '#/components/schemas/Pet'
    #     required: true
    #   responses:
    #     '200':
    #       description: Successful operation
    #       content:
    #         application/json:
    #           schema:
    #             $ref: '#/components/schemas/Pet'
    #         application/xml:
    #           schema:
    #             $ref: '#/components/schemas/Pet'
    #     '400':
    #       description: Invalid input
    #     '422':
    #       description: Validation exception
    #   security:
    #     - petstore_auth:
    #         - write:pets
    #         - read:pets
  # /api/v1/users/{userId}/files/duplicate-check:
  #   post:
  #     tags:
  #       - FileUpload
  #     summary: Duplicate file check
  #     description: check if files with same name exists in user account
  #     operationId: FilenameCheck
  #     parameters:
  #       - name: userId
  #         in: path
  #         description: ID of user
  #         required: true
  #         schema:
  #           type: integer
  #           format: int64
  #           default: 1
  #       # - name: files
  #       #   in: query
  #       #   description: List of files to check for duplicates
  #       #   required: false
  #       #   explode: true
  #       #   schema:
  #       #     type: array
  #       #     items:
  #       #       type: string
  #       #     default: ['Company Agreement', 'Software Agreement']
  #     requestBody:
  #       content:
  #         application/json:
  #           schema:
  #             type: array
  #             items:
  #               type: string
  #             default: ['Company agreement', 'Software agreement']
  #     responses:
  #       '200':
  #         description: successful duplicate check result
  #         content:
  #           application/json:
  #             schema:
  #               type: array
  #               items:
  #                 $ref: '#/components/schemas/DuplicateCheckResponse'
  #           # application/xml:
  #           #   schema:
  #           #     type: array
  #           #     items:
  #           #       $ref: '#/components/schemas/Pet'
  #       '401':
  #         description: Unauthorized
  #     # security:
  #     #   - petstore_auth:
  #     #       - write:pets
  #     #       - read:pets
  # /api/v1/users/{userId}/files/{fileId}/replace:
  #   get:
  #     tags:
  #       - FileUpload
  #     summary: Replace existing file by a new file
  #     description: Replace existing file with a new file
  #     operationId: fileReplace
  #     parameters:
  #       - name: userId
  #         in: path
  #         description: ID of user
  #         required: true
  #         schema:
  #           type: integer
  #           format: int64
  #           default: 1
  #       - name: fileId
  #         in: path
  #         description: ID of file
  #         required: true
  #         schema:
  #           type: integer
  #           format: int64
  #           default: 1
  #     responses:
  #       '200':
  #         description: File replaced successfully
  #         # content:
  #         #   application/json:
  #         #     schema:
  #         #       type: array
  #         #       items:
  #         #         $ref: '#/components/schemas/Pet'
  #         #   application/xml:
  #         #     schema:
  #         #       type: array
  #         #       items:
  #         #         $ref: '#/components/schemas/Pet'
  #       '401':
  #         description: Unauthorized
      # security:
      #   - petstore_auth:
      #       - write:pets
      #       - read:pets
  # /pet/{petId}:
  #   get:
  #     tags:
  #       - pet
  #     summary: Find pet by ID
  #     description: Returns a single pet
  #     operationId: getPetById
  #     parameters:
  #       - name: petId
  #         in: path
  #         description: ID of pet to return
  #         required: true
  #         schema:
  #           type: integer
  #           format: int64
  #     responses:
  #       '200':
  #         description: successful operation
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/Pet'
  #           application/xml:
  #             schema:
  #               $ref: '#/components/schemas/Pet'
  #       '400':
  #         description: Invalid ID supplied
  #       '404':
  #         description: Pet not found
  #     security:
  #       - api_key: []
  #       - petstore_auth:
  #           - write:pets
  #           - read:pets
  #   post:
  #     tags:
  #       - pet
  #     summary: Updates a pet in the store with form data
  #     description: ''
  #     operationId: updatePetWithForm
  #     parameters:
  #       - name: petId
  #         in: path
  #         description: ID of pet that needs to be updated
  #         required: true
  #         schema:
  #           type: integer
  #           format: int64
  #       - name: name
  #         in: query
  #         description: Name of pet that needs to be updated
  #         schema:
  #           type: string
  #       - name: status
  #         in: query
  #         description: Status of pet that needs to be updated
  #         schema:
  #           type: string
  #     responses:
  #       '400':
  #         description: Invalid input
  #     security:
  #       - petstore_auth:
  #           - write:pets
  #           - read:pets
  #   delete:
  #     tags:
  #       - pet
  #     summary: Deletes a pet
  #     description: delete a pet
  #     operationId: deletePet
  #     parameters:
  #       - name: api_key
  #         in: header
  #         description: ''
  #         required: false
  #         schema:
  #           type: string
  #       - name: petId
  #         in: path
  #         description: Pet id to delete
  #         required: true
  #         schema:
  #           type: integer
  #           format: int64
  #     responses:
  #       '400':
  #         description: Invalid pet value
  #     security:
  #       - petstore_auth:
  #           - write:pets
  #           - read:pets
  # /pet/{petId}/uploadImage:
  #   post:
  #     tags:
  #       - pet
  #     summary: uploads an image
  #     description: ''
  #     operationId: uploadFile
  #     parameters:
  #       - name: petId
  #         in: path
  #         description: ID of pet to update
  #         required: true
  #         schema:
  #           type: integer
  #           format: int64
  #       - name: additionalMetadata
  #         in: query
  #         description: Additional Metadata
  #         required: false
  #         schema:
  #           type: string
  #     requestBody:
  #       content:
  #         application/octet-stream:
  #           schema:
  #             type: string
  #             format: binary
  #     responses:
  #       '200':
  #         description: successful operation
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/ApiResponse'
  #     security:
  #       - petstore_auth:
  #           - write:pets
  #           - read:pets
  # /store/inventory:
  #   get:
  #     tags:
  #       - store
  #     summary: Returns pet inventories by status
  #     description: Returns a map of status codes to quantities
  #     operationId: getInventory
  #     responses:
  #       '200':
  #         description: successful operation
  #         content:
  #           application/json:
  #             schema:
  #               type: object
  #               additionalProperties:
  #                 type: integer
  #                 format: int32
  #     security:
  #       - api_key: []
  # /store/order:
  #   post:
  #     tags:
  #       - store
  #     summary: Place an order for a pet
  #     description: Place a new order in the store
  #     operationId: placeOrder
  #     requestBody:
  #       content:
  #         application/json:
  #           schema:
  #             $ref: '#/components/schemas/Order'
  #         application/xml:
  #           schema:
  #             $ref: '#/components/schemas/Order'
  #         application/x-www-form-urlencoded:
  #           schema:
  #             $ref: '#/components/schemas/Order'
  #     responses:
  #       '200':
  #         description: successful operation
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/Order'
  #       '400':
  #         description: Invalid input
  #       '422':
  #         description: Validation exception
  # /store/order/{orderId}:
  #   get:
  #     tags:
  #       - store
  #     summary: Find purchase order by ID
  #     description: For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.
  #     operationId: getOrderById
  #     parameters:
  #       - name: orderId
  #         in: path
  #         description: ID of order that needs to be fetched
  #         required: true
  #         schema:
  #           type: integer
  #           format: int64
  #     responses:
  #       '200':
  #         description: successful operation
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/Order'
  #           application/xml:
  #             schema:
  #               $ref: '#/components/schemas/Order'
  #       '400':
  #         description: Invalid ID supplied
  #       '404':
  #         description: Order not found
  #   delete:
  #     tags:
  #       - store
  #     summary: Delete purchase order by ID
  #     description: For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors
  #     operationId: deleteOrder
  #     parameters:
  #       - name: orderId
  #         in: path
  #         description: ID of the order that needs to be deleted
  #         required: true
  #         schema:
  #           type: integer
  #           format: int64
  #     responses:
  #       '400':
  #         description: Invalid ID supplied
  #       '404':
  #         description: Order not found
  # /user:
  #   post:
  #     tags:
  #       - user
  #     summary: Create user
  #     description: This can only be done by the logged in user.
  #     operationId: createUser
  #     requestBody:
  #       description: Created user object
  #       content:
  #         application/json:
  #           schema:
  #             $ref: '#/components/schemas/User'
  #         application/xml:
  #           schema:
  #             $ref: '#/components/schemas/User'
  #         application/x-www-form-urlencoded:
  #           schema:
  #             $ref: '#/components/schemas/User'
  #     responses:
  #       default:
  #         description: successful operation
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/User'
  #           application/xml:
  #             schema:
  #               $ref: '#/components/schemas/User'
  # /user/createWithList:
  #   post:
  #     tags:
  #       - user
  #     summary: Creates list of users with given input array
  #     description: Creates list of users with given input array
  #     operationId: createUsersWithListInput
  #     requestBody:
  #       content:
  #         application/json:
  #           schema:
  #             type: array
  #             items:
  #               $ref: '#/components/schemas/User'
  #     responses:
  #       '200':
  #         description: Successful operation
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/User'
  #           application/xml:
  #             schema:
  #               $ref: '#/components/schemas/User'
  #       default:
  #         description: successful operation
  # /user/login:
  #   get:
  #     tags:
  #       - user
  #     summary: Logs user into the system
  #     description: ''
  #     operationId: loginUser
  #     parameters:
  #       - name: username
  #         in: query
  #         description: The user name for login
  #         required: false
  #         schema:
  #           type: string
  #       - name: password
  #         in: query
  #         description: The password for login in clear text
  #         required: false
  #         schema:
  #           type: string
  #     responses:
  #       '200':
  #         description: successful operation
  #         headers:
  #           X-Rate-Limit:
  #             description: calls per hour allowed by the user
  #             schema:
  #               type: integer
  #               format: int32
  #           X-Expires-After:
  #             description: date in UTC when token expires
  #             schema:
  #               type: string
  #               format: date-time
  #         content:
  #           application/xml:
  #             schema:
  #               type: string
  #           application/json:
  #             schema:
  #               type: string
  #       '400':
  #         description: Invalid username/password supplied
  # /user/logout:
  #   get:
  #     tags:
  #       - user
  #     summary: Logs out current logged in user session
  #     description: ''
  #     operationId: logoutUser
  #     parameters: []
  #     responses:
  #       default:
  #         description: successful operation
  # /user/{username}:
  #   get:
  #     tags:
  #       - user
  #     summary: Get user by user name
  #     description: ''
  #     operationId: getUserByName
  #     parameters:
  #       - name: username
  #         in: path
  #         description: 'The name that needs to be fetched. Use user1 for testing. '
  #         required: true
  #         schema:
  #           type: string
  #     responses:
  #       '200':
  #         description: successful operation
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/User'
  #           application/xml:
  #             schema:
  #               $ref: '#/components/schemas/User'
  #       '400':
  #         description: Invalid username supplied
  #       '404':
  #         description: User not found
  #   put:
  #     tags:
  #       - user
  #     summary: Update user
  #     description: This can only be done by the logged in user.
  #     operationId: updateUser
  #     parameters:
  #       - name: username
  #         in: path
  #         description: name that need to be deleted
  #         required: true
  #         schema:
  #           type: string
  #     requestBody:
  #       description: Update an existent user in the store
  #       content:
  #         application/json:
  #           schema:
  #             $ref: '#/components/schemas/User'
  #         application/xml:
  #           schema:
  #             $ref: '#/components/schemas/User'
  #         application/x-www-form-urlencoded:
  #           schema:
  #             $ref: '#/components/schemas/User'
  #     responses:
  #       default:
  #         description: successful operation
  #   delete:
  #     tags:
  #       - user
  #     summary: Delete user
  #     description: This can only be done by the logged in user.
  #     operationId: deleteUser
  #     parameters:
  #       - name: username
  #         in: path
  #         description: The name that needs to be deleted
  #         required: true
  #         schema:
  #           type: string
  #     responses:
  #       '400':
  #         description: Invalid username supplied
  #       '404':
  #         description: User not found
components:
  schemas:
    # DuplicateCheckResponse:
    #   type: object
    #   properties:
    #     fileName:
    #       type: string
    #       example: 'Company Agreement'
    #     isDuplicate:
    #       type: boolean
    #       example: false
    FileMetaData:
      type: object
      properties:
        id:
          type: string
          example: "acddb213"
        name:
          type: string
          example: "file.pdf"
    Paragraph:
      type: object
      properties:
        id:
          type: string
          example: "acddb213"
        content:
          type: string
          example: "paragraph content"
        fileId:
          type: string
          example: "file123"
        paragraphNumber:
          type: integer
          example: 3
        pageNumber:
          type: integer
          example: 2

    FileUpload:
      type: array
      items:
        type: string
      default: ['Company agreement', 'Software agreement']
  #   Order:
  #     type: object
  #     properties:
  #       id:
  #         type: integer
  #         format: int64
  #         example: 10
  #       petId:
  #         type: integer
  #         format: int64
  #         example: 198772
  #       quantity:
  #         type: integer
  #         format: int32
  #         example: 7
  #       shipDate:
  #         type: string
  #         format: date-time
  #       status:
  #         type: string
  #         description: Order Status
  #         example: approved
  #         enum:
  #           - placed
  #           - approved
  #           - delivered
  #       complete:
  #         type: boolean
  #     xml:
  #       name: order
  #   Customer:
  #     type: object
  #     properties:
  #       id:
  #         type: integer
  #         format: int64
  #         example: 100000
  #       username:
  #         type: string
  #         example: fehguy
  #       address:
  #         type: array
  #         xml:
  #           name: addresses
  #           wrapped: true
  #         items:
  #           $ref: '#/components/schemas/Address'
  #     xml:
  #       name: customer
  #   Address:
  #     type: object
  #     properties:
  #       street:
  #         type: string
  #         example: 437 Lytton
  #       city:
  #         type: string
  #         example: Palo Alto
  #       state:
  #         type: string
  #         example: CA
  #       zip:
  #         type: string
  #         example: '94301'
  #     xml:
  #       name: address
  #   Category:
  #     type: object
  #     properties:
  #       id:
  #         type: integer
  #         format: int64
  #         example: 1
  #       name:
  #         type: string
  #         example: Dogs
  #     xml:
  #       name: category
  #   User:
  #     type: object
  #     properties:
  #       id:
  #         type: integer
  #         format: int64
  #         example: 10
  #       username:
  #         type: string
  #         example: theUser
  #       firstName:
  #         type: string
  #         example: John
  #       lastName:
  #         type: string
  #         example: James
  #       email:
  #         type: string
  #         example: john@email.com
  #       password:
  #         type: string
  #         example: '12345'
  #       phone:
  #         type: string
  #         example: '12345'
  #       userStatus:
  #         type: integer
  #         description: User Status
  #         format: int32
  #         example: 1
  #     xml:
  #       name: user
  #   Tag:
  #     type: object
  #     properties:
  #       id:
  #         type: integer
  #         format: int64
  #       name:
  #         type: string
  #     xml:
  #       name: tag
  #   Pet:
  #     required:
  #       - name
  #       - photoUrls
  #     type: object
  #     properties:
  #       id:
  #         type: integer
  #         format: int64
  #         example: 10
  #       name:
  #         type: string
  #         example: doggie
  #       category:
  #         $ref: '#/components/schemas/Category'
  #       photoUrls:
  #         type: array
  #         xml:
  #           wrapped: true
  #         items:
  #           type: string
  #           xml:
  #             name: photoUrl
  #       tags:
  #         type: array
  #         xml:
  #           wrapped: true
  #         items:
  #           $ref: '#/components/schemas/Tag'
  #       status:
  #         type: string
  #         description: pet status in the store
  #         enum:
  #           - available
  #           - pending
  #           - sold
  #     xml:
  #       name: pet
  #   ApiResponse:
  #     type: object
  #     properties:
  #       code:
  #         type: integer
  #         format: int32
  #       type:
  #         type: string
  #       message:
  #         type: string
  #     xml:
  #       name: '##default'
  # requestBodies:
  #   Pet:
  #     description: Pet object that needs to be added to the store
  #     content:
  #       application/json:
  #         schema:
  #           $ref: '#/components/schemas/Pet'
  #       application/xml:
  #         schema:
  #           $ref: '#/components/schemas/Pet'
  #   UserArray:
  #     description: List of user object
  #     content:
  #       application/json:
  #         schema:
  #           type: array
  #           items:
  #             $ref: '#/components/schemas/User'
